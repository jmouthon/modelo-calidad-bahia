pip install matplotlib
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="Modelo de DBO en cuerpos conectados", layout="centered")

# ----------------------------------------
# T√çTULO Y DESCRIPCI√ìN
# ----------------------------------------
st.title("Simulaci√≥n de DBO en cuerpos de agua interconectados")
st.markdown("""
Este modelo simula la evoluci√≥n de la **Demanda Bioqu√≠mica de Ox√≠geno (DBO)** en dos cuerpos de agua conectados, considerando:

- Transporte dispersivo
- Degradaci√≥n biol√≥gica (1er orden)
- **Descarga puntual solo durante el primer d√≠a**
- Condici√≥n de frontera con la bah√≠a

üß™ Modifica los par√°metros y observa los resultados.
""")

# ----------------------------------------
# ENTRADAS INTERACTIVAS
# ----------------------------------------

st.sidebar.header("üîß Par√°metros modificables")

L_input = st.sidebar.slider("Carga de DBO durante el primer d√≠a [mg/d√≠a]", 0, 5_000_000, 1_000_000, step=100_000)

CB = st.sidebar.slider("Concentraci√≥n de DBO en la bah√≠a [mg/L]", 0.0, 10.0, 1.0, step=0.1)

t_descarga = 1.0  # [d√≠as] duraci√≥n de la descarga

# ----------------------------------------
# PAR√ÅMETROS FIJOS DEL MODELO
# ----------------------------------------

# Vol√∫menes [m¬≥]
V1 = 1e5
V2 = 2e5

# Conexi√≥n bah√≠a ‚Üî Cuerpo 1
A1B = 25      # m¬≤
L1B = 80      # m
E1B = 0.6     # m¬≤/s
D1B = E1B * A1B / L1B * 86400  # m¬≥/d√≠a

# Conexi√≥n Cuerpo 1 ‚Üî Cuerpo 2
A12 = 18
L12 = 120
E12 = 0.4
D12 = E12 * A12 / L12 * 86400

# Remoci√≥n de DBO
k1 = 0.2  # 1/d√≠a
k2 = 0.1  # 1/d√≠a

# Tiempo de simulaci√≥n
Tmax = 30  # d√≠as
dt = 0.1
N = int(Tmax / dt)

# Condiciones iniciales
C1 = 0.0
C2 = 0.0

# ----------------------------------------
# FUNCIONES DEL MODELO
# ----------------------------------------

def derivadas(C1, C2, t):
    # Descarga puntual solo durante el primer d√≠a
    L = L_input if t < t_descarga else 0.0

    dC1_dt = (1/V1)*(D1B*(CB - C1) + D12*(C2 - C1) + L) - k1*C1
    dC2_dt = (1/V2)*(D12*(C1 - C2)) - k2*C2
    return dC1_dt, dC2_dt

# ----------------------------------------
# RUNGE-KUTTA 4
# ----------------------------------------

t_list = [0]
C1_list = [C1]
C2_list = [C2]

t = 0

for i in range(N):
    k1_1, k2_1 = derivadas(C1, C2, t)
    k1_2, k2_2 = derivadas(C1 + dt*k1_1/2, C2 + dt*k2_1/2, t + dt/2)
    k1_3, k2_3 = derivadas(C1 + dt*k1_2/2, C2 + dt*k2_2/2, t + dt/2)
    k1_4, k2_4 = derivadas(C1 + dt*k1_3, C2 + dt*k2_3, t + dt)

    C1 += (dt/6)*(k1_1 + 2*k1_2 + 2*k1_3 + k1_4)
    C2 += (dt/6)*(k2_1 + 2*k2_2 + 2*k2_3 + k2_4)

    t += dt
    t_list.append(t)
    C1_list.append(C1)
    C2_list.append(C2)

# ----------------------------------------
# GR√ÅFICA DE RESULTADOS
# ----------------------------------------

fig, ax = plt.subplots(figsize=(8, 5))
ax.plot(t_list, C1_list, label="Cuerpo 1 (con descarga)", linewidth=2)
ax.plot(t_list, C2_list, label="Cuerpo 2 (ci√©naga)", linewidth=2)
ax.axhline(CB, color='gray', linestyle='--', label='Bah√≠a (frontera)', linewidth=1.5)
ax.set_xlabel("Tiempo [d√≠as]")
ax.set_ylabel("Concentraci√≥n de DBO [mg/L]")
ax.set_title("Evoluci√≥n de la DBO con descarga temporal")
ax.grid(True)
ax.legend()
st.pyplot(fig)
